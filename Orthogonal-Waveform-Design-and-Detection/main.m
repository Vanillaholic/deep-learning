clc;clear;close all;
addpath('funcs');  % 将 functions 文件夹添加到路径
fs = 4e3;
fc = 1.5e3;
Ts = 1/fs;
B = 200;    % 带宽（Hz）
%% ------------------------------------------------------------
%M序列信号
m = 5 ; l = 2^m-1 ; %阶数：5  
oct1 = 45 ;
gen1  = [1 0 0 1 0 1] ;%生成多项式
mseq1 = m_seq(oct1,gen1);%生成m序列

oct2 = 67 ;
gen2  = [1 1 0 1 1 1] ;%生成多项式
mseq2 = m_seq(oct2,gen2);%生成m序列

oct3 = 75 ;
gen3  = [1 1 1 1 0 1] ;%生成多项式
mseq3 = m_seq(oct3,gen3);%生成m序列

%disp(mseq1,mseq2,mseq3);

%2s的信号，31个二进制数
n = length(mseq1);                   %相位变化点数31
%采用相位编码，设3.1s的CW信号
Tp = 3.1/n;                          %子脉冲长度Tp 3.1s
N_subpulse = round(Tp*fs);           %子脉冲采样点数
t_subpulse = 0 :1/fs:Tp-1/fs;        %时间序列，采样间隔为 1/fs

for kk = 1:n % 遍历每个变化点
    Nx1 = (kk-1)*N_subpulse+1;   % 当前跳频点的起始索引
    Nx11 = (kk)*N_subpulse;      % 当前跳频点的结束索引
    m_pulse1(Nx1:Nx11) = exp(1i*(2*pi*fc*t_subpulse+pi*mseq1(kk))); % 生成信号的复包络,3.1s
    m_pulse2(Nx1:Nx11) = exp(1i*(2*pi*fc*t_subpulse+pi*mseq2(kk))); % 生成信号的复包络,3.1s
    m_pulse3(Nx1:Nx11) = exp(1i*(2*pi*fc*t_subpulse+pi*mseq3(kk))); % 生成信号的复包络,3.1s
end    

%三个不同的匹配滤波器
matchedFilter1 = m_pulse1;
matchedFilter2 = m_pulse2;
matchedFilter3 = m_pulse3;

TIME = 260;
n = round(3.1*fs);
paddled1 = [m_pulse1 zeros(1,round(TIME*fs)-n)];                    %0~3.1s存在信号，时间尺度为100s
paddled2  = [zeros(1,10*fs) m_pulse2 zeros(1,round((TIME-10)*fs)-n)];%10~13.1S存在信号
paddled3  = [zeros(1,20*fs) m_pulse3 zeros(1,round((TIME-20)*fs)-n)];%20~23.1s存在信号


% 定义时间参数
t = (0:1/fs:TIME - 1/fs).'; % 时间向量，这里生成0到100秒的时间序列，采样间隔为1/fs
N = length(t);
f = -fs/2:fs/N:fs/2-fs/N;
figure
plot(t, real(paddled1));hold on;
plot(t, real(paddled2));hold on;
plot(t, real(paddled3));hold on;
xlabel('t/s');ylabel('amplitude');title('waveform generated by m-sequence');
grid on;legend('wavefrom-1','wavefrom-2','wavefrom-3');
axis([0,50,-3,3]);
%计算三个波形的能量
E1 = 20*log10(sum(abs(m_pulse1).^2)./1e-6);
E2 = 20*log10(sum(abs(m_pulse2).^2)./1e-6);
E3 = 20*log10(sum(abs(m_pulse3).^2)./1e-6);
disp(E1);
%% ----------------------------------------------------------------------
%绘制宽带模糊函数
r=50;b=2;len=7;
c = 1500;                           %参考速度为1500
vmin = -20; vmax = 20;              %定义速度范围
velt= 0*c/(r*(b^len-1));            %速度为0，无多普勒 
etat = 1+(velt/c);                  %(1+v/c)用来计算经多普勒频移后的频率的比值
[pt,qt] = rat(etat);                %获取(1+v/c)的分子和分母
rs_bsig1 = resample(m_pulse1,pt,qt);%对信号进行重采样
% delay
N = size(rs_bsig1,2);               %获取重采样的信号大小
delay = round((1000/c)*fs);         %TO DO:?????
obsvN = delay+N;                    %obsvN 总的观测的长度
s_n = [rs_bsig1 zeros(1,obsvN-N)];  %s_n 在原始信号后面补零
sig = s_n(1:obsvN-delay);           %截取的信号
bsig_no = [zeros(1,delay) sig];     %对sig添加延迟

clear obsvN sig N;

vel_del = c/(r*(b^len-1));          % vel_del 速度分辨率
vel = 0:vel_del:vmax;               
vel = [-vel(end:-1:2) vel];         % vel 速度范围：其中存储的是不同的速度，包括正负值
eta = 1+(vel/c);                    %获取(1+v/c)的分子和分母
[p,q]= rat(eta);                    

ambig1 = cell(1, length(vel));      %初始化两个cell数组
ambig2 = cell(1, length(vel));
ambig3 = cell(1, length(vel));

for i =1:length(vel)  % 遍历vel速度数组
    re_samp_bsig1 = resample(m_pulse1,p(i),q(i));     % p>q expansion and p<q compression
    re_samp_bsig2 = resample(m_pulse2,p(i),q(i));
    re_samp_bsig3 = resample(m_pulse3,p(i),q(i));
    
    % --------在时域上进行相关处理----------------------------------- 
    if length(re_samp_bsig1)>length(bsig_no)   %如果重采样后的信号长度大于延迟信号，补零以匹配长度。
        na = length(re_samp_bsig1)-length(bsig_no);
        bsig_no= [bsig_no zeros(1,na+1)];
    end
    ambig1{i}=  abs(matchFilter(bsig_no,re_samp_bsig1,'none'));
    nl = length(bsig_no);
    ambigh1(1:(nl),i) =(ambig1{i});

    if length(re_samp_bsig2)>length(bsig_no)
        na = length(re_samp_bsig2)-length(bsig_no);
        bsig_no= [bsig_no zeros(1,na+1)];
    end     
    ambig2{i}=  abs(matchFilter(bsig_no,re_samp_bsig2,'none'));
    nl = length(bsig_no);
    ambigh2(1:(nl),i) =(ambig2{i});

    if length(re_samp_bsig3)>length(bsig_no)   %如果重采样后的信号长度大于延迟信号，补零以匹配长度。
        na = length(re_samp_bsig3)-length(bsig_no);
        bsig_no= [bsig_no zeros(1,na+1)];
    end
    ambig3{i}=  abs(matchFilter(bsig_no,re_samp_bsig3,'none'));
    nl = length(bsig_no);
    ambigh3(1:(nl),i) =(ambig3{i});


end

Max1= max(max(ambigh1));Max2= max(max(ambigh2));Max3= max(max(ambigh3));
A1=(abs(ambigh1 ./ Max1));A2=(abs(ambigh2 ./ Max2));A3 = (abs(ambigh3 ./ Max3));

%重采样模糊函数
%% resample the ambiguity funnction;
for i =1:length(vel)
    re_ambigh1(:,i)=resample(A1(:,i),1,6.);
    re_ambigh2(:,i)=resample(A2(:,i),1,6);
    re_ambigh3(:,i)=resample(A3(:,i),1,6);
end
A1=re_ambigh1;A2=re_ambigh2;A3=re_ambigh3;


figure;
N = length(A1); delay = 1:N; mesh(vel,((delay-N/2).*c)./(2*fs),A1);
xlabel('velocity (m/s, scale)');ylabel('range (m, delay)'); zlabel('magnitude');
title('Ambiguity surface'); axis tight;

figure
N = length(A1); delay = 1:N; mesh(vel,((delay-N/2).*c)./(2*fs),A1);
xlabel('velocity (m/s, scale)');ylabel('range (m, delay)'); zlabel('magnitude');
title('Ambiguity surface'); axis tight;
view(0,90);colorbar;

figure;
N = length(A2); delay = 1:N; mesh(vel,((delay-N/2).*c)./(2*fs),A2);
xlabel('velocity (m/s, scale)');ylabel('range (m,delay)'); zlabel('magnitude');
title('Ambiguity surface'); axis tight; 

figure
N = length(A2); delay = 1:N; mesh(vel,((delay-N/2).*c)./(2*fs),A2);
xlabel('velocity (m/s, scale)');ylabel('range (m,delay)'); zlabel('magnitude');
title('Ambiguity surface'); axis tight;
view(0,90);colorbar;

figure;
N = length(A3); delay = 1:N; mesh(vel,((delay-N/2).*c)./(2*fs),A3);
xlabel('velocity (m/s, scale)');ylabel('range (m, delay)'); zlabel('magnitude');
title('Ambiguity surface'); axis tight;

figure
N = length(A3); delay = 1:N; mesh(vel,((delay-N/2).*c)./(2*fs),A3);
xlabel('velocity (m/s, scale)');ylabel('range (m, delay)'); zlabel('magnitude');
title('Ambiguity surface'); axis tight;
view(0,90);colorbar;
%% -------------------------------------------------
%计算相关函数
[c11,lags] = xcorr(m_pulse1 ,m_pulse1);
idx = find(lags>=0,1);%找到第一个大于等于0的索引
c11 = c11./length(m_pulse1);
figure
plot(lags*(1/fs),abs(c11));grid on;
xlabel('t/s');ylabel('amplitude');
title('c_{11}');ylim([0,1]);

[c12,lags] = xcorr(m_pulse1 ,m_pulse2);
idx = find(lags>=0,1);%找到第一个大于等于0的索引
c12 = c12./length(m_pulse1);
figure
plot(lags*(1/fs),abs(c12));grid on;title('correlation-c12');ylim([0,1]);
xlabel('t/s');ylabel('amplitude');
title('c_{12}');ylim([0,1]);


[c13,lags] = xcorr(m_pulse1 ,m_pulse2);
idx = find(lags>=0,1);%找到第一个大于等于0的索引
c13 = c13./length(m_pulse1);
figure
plot(lags*(1/fs),abs(c13));grid on;
title('c_{13}');ylim([0,1]);
xlabel('t/s');ylabel('amplitude');

%% -----------------------------------------------------------
%提取信道脉冲响应
bellhop('envs/direct_Arr');                 %直达区
[direct_arr, ~ ] = read_arrivals_asc('envs/direct_Arr.arr');

bellhop('envs/shadow1_Arr');                %第一声影区
[shadow1_arr, ~ ] = read_arrivals_asc('envs/shadow1_Arr.arr');

bellhop('envs/convergence1_Arr');           %第一会聚区
[convergence1_arr, ~ ] = read_arrivals_asc('envs/convergence1_Arr.arr');
 
bellhop('envs/shadow2_Arr');                %第二声影区
[shadow2_arr, ~ ] = read_arrivals_asc('envs/shadow2_Arr.arr');

bellhop('envs/convergence2_Arr');           %第二会聚区
[convergence2_arr, ~ ] = read_arrivals_asc('envs/convergence2_Arr.arr');

bellhop('envs/shadow3_Arr');                %第三声影区
[ shadow3_arr, ~ ] = read_arrivals_asc('envs/shadow3_Arr.arr');

bellhop('envs/convergence3_Arr');           %第三会聚区
[convergence3_arr, ~ ] = read_arrivals_asc('envs/convergence3_Arr.arr');

t = 0:1/fs:TIME - 1/fs; % 时间向量，这里生成0到200秒的时间序列，采样间隔为1/fs

%获取脉冲响应
%fs：采样频率，时间长度260s

direct_IR = get_IR(direct_arr, fs, TIME);            %直达区脉冲响应
direct_TF = fftshift(fft(direct_IR)).';

shadow1_IR = get_IR(shadow1_arr, fs, TIME);          %第一声影区脉冲响应
shadow1_TF = fftshift(fft(shadow1_IR)).';

convergence1_IR = get_IR(convergence1_arr, fs, TIME); %第一会聚区脉冲响应
convergence1_TF = fftshift(fft(convergence1_IR)).';

shadow2_IR = get_IR(shadow2_arr, fs, TIME);           %第二声影区脉冲响应
shadow2_TF = fftshift(fft(shadow2_IR)).';

convergence2_IR = get_IR(convergence2_arr, fs, TIME); %第二会聚区脉冲响应
convergence2_TF = fftshift(fft(convergence2_IR)).';

shadow3_IR = get_IR(shadow3_arr, fs, TIME);           %第二声影区脉冲响应
shadow3_TF = fftshift(fft(shadow3_IR)).';

convergence3_IR = get_IR(convergence3_arr, fs, TIME); %第二会聚区脉冲响应
convergence3_TF = fftshift(fft(convergence3_IR)).';

N = length(t);
f = -fs/2:fs/N:fs/2-fs/N;
figure
subplot(4,1,1)
plot(t,direct_IR);grid on;xlabel('t/s');ylabel('amplitude');axis tight;

subplot(4,2,3)
plot(t,shadow1_IR);grid on;xlabel('t/s');ylabel('amplitude');axis tight;

subplot(4,2,4)
plot(t,convergence1_IR);grid on;xlabel('t/s');ylabel('amplitude');axis tight;

subplot(4,2,5)
plot(t,shadow2_IR);grid on;xlabel('t/s');ylabel('amplitude');axis tight;

subplot(4,2,6)
plot(t,convergence2_IR);grid on;xlabel('t/s');ylabel('amplitude');axis tight;
subplot(4,2,7)
plot(t,shadow3_IR);grid on;xlabel('t/s');ylabel('amplitude');axis tight;

subplot(4,2,8)
plot(t,convergence3_IR);grid on;xlabel('t/s');ylabel('amplitude');axis tight;

%% -----------------------------------------------------
%仿真亮点模型

L = [76,   60,     45,   30,   16,   0]; 
b = [0.4, 0.3, 1.0, 0.3, 0.3, 0.5];% 定义距离和反射系数
r = [7,7,8,7,7,7];

c = 1530;    %深度1000m 声速1500m/s
N = length(t);
f = -fs/2:fs/N:fs/2-fs/N;
theta = 90;
phi = pi;

TF_highlight = get_highlight_TF(c,fs,N,theta,L,b,r).';
%绘制亮点的转移函数和脉冲响应
figure
% subplot(2,1,2);
% plot(f,abs(TF_highlight));xlabel('f/Hz');ylabel('幅度');grid on;title('亮点模型转移函数');
% axis(-fs/2,fs/2,0,inf);
IR_Highlight = ifft(fftshift(TF_highlight));
% subplot(2,1,1);
time = 0.49;
plot(t,abs(IR_Highlight));xlabel('t/s');ylabel('amplitude');grid on;title('impluse response of highlight');
axis([0,time,-inf,inf]);
clear IR_Highlight;

s1_f = fftshift(fft(paddled1.')).*direct_TF.*TF_highlight;%经过信道到达目标

s2_f = fftshift(fft(paddled1).').*shadow1_TF.*TF_highlight;%目标的转移函数

s3_f = fftshift(fft(paddled1).').*convergence1_TF.*TF_highlight;%目标的转移函数

s4_f = fftshift(fft(paddled1).').*shadow2_TF.*TF_highlight;%目标的转移函数

s5_f = fftshift(fft(paddled1).').*convergence2_TF.*TF_highlight;%目标的转移函数

s6_f = fftshift(fft(paddled1).').*shadow3_TF.*TF_highlight;%目标的转移函数

s7_f = fftshift(fft(paddled1).').*convergence3_TF.*TF_highlight;%目标的转移函数

clear P1 P2 P3;
clear  TF_highlight L b R;
%% 信号返回发射点
temp = s1_f.*direct_TF;
s1 = ifft(fftshift(temp));%交换变量

temp = s2_f.*shadow1_TF;
s2 = ifft(fftshift(temp));%交换变量

temp = s3_f.*convergence1_TF;
s3 = ifft(fftshift(temp));%交换变量

temp = s4_f.*shadow2_TF;
s4 = ifft(fftshift(temp));%交换变量

temp = s5_f.*convergence2_TF;
s5 = ifft(fftshift(temp));%交换变量

temp = s6_f.*shadow3_TF;
s6 = ifft(fftshift(temp));%交换变量

temp = s7_f.*convergence3_TF;
s7 = ifft(fftshift(temp));%交换变量

figure
subplot(4,1,1)
plot(t,real(s1));xlabel('t/s');ylabel('幅度/V');grid on;axis tight;
title(sprintf('直达区反射的信号'));
subplot(4,2,3)
plot(t,real(s2));xlabel('t/s');ylabel('幅度/V');grid on;axis tight;
title(sprintf('第一声影区反射的信号'));
subplot(4,2,4)
plot(t,real(s3));xlabel('t/s');ylabel('幅度/V');grid on;axis tight;
title(sprintf('第一会聚区反射的信号'));
subplot(4,2,5)
plot(t,real(s4));xlabel('t/s');ylabel('幅度/V');grid on;axis tight;
title(sprintf('第二声影区反射的信号'));
subplot(4,2,6)
plot(t,real(s5));xlabel('t/s');ylabel('幅度/V');grid on;axis tight;
title(sprintf('第二会聚区反射的信号'));
subplot(4,2,7)
plot(t,real(s6));xlabel('t/s');ylabel('幅度/V');grid on;axis tight;
title(sprintf('第三声影区反射的信号'));
subplot(4,2,8)
plot(t,real(s7));xlabel('t/s');ylabel('幅度/V');grid on;
title(sprintf('第三会聚区反射的信号'));axis tight;

%% 检测脉冲
frame_length = 64;       % 帧长（样本点数）
frame_shift = 32;         % 帧移（样本点数）
threshold = 1e-40;         % 能量阈值（根据实验调整）
num_frames = floor(length(s2 ) / frame_shift) - 1;  % 计算帧的数量
[vad_signal2,vad2_start_index,vad2_end_index,frame_energies2] = detect_pulse(s2,frame_length,frame_shift,1e-40);
[vad_signal3,vad3_start_index,vad3_end_index,frame_energies3] = detect_pulse(s3,frame_length,frame_shift,1e-40);
[vad_signal4,vad4_start_index,vad4_end_index,frame_energies4] = detect_pulse(s4,frame_length,frame_shift,1e-40);
[vad_signal5,vad5_start_index,vad5_end_index,frame_energies5] = detect_pulse(s5,frame_length,frame_shift,1e-40);
[vad_signal6,vad6_start_index,vad6_end_index,frame_energies6] = detect_pulse(s6,frame_length,frame_shift,1e-40);
[vad_signal7,vad7_start_index,vad7_end_index,frame_energies7] = detect_pulse(s7,frame_length,frame_shift,1e-40);
% 可视化每帧的能量
figure;
subplot(2,1,1)
plot(frame_energies2);grid on;
title('Frame Energies');xlabel('Frame Index');ylabel('Energy');
% 可视化提取的语音信号
subplot(2,1,2)
plot(real(vad_signal2));grid on;
title('Pulse Extracted by VAD');
xlabel('Time (samples)');ylabel('Amplitude');


E_vad2 = sum(abs(vad_signal2).^2);E_vad3 = sum(abs(vad_signal3).^2);
E_vad4 = sum(abs(vad_signal4).^2);E_vad5 = sum(abs(vad_signal5).^2);
E_vad6 = sum(abs(vad_signal6).^2);E_vad7 = sum(abs(vad_signal7).^2);

TL2 = 10*log10(E2/E_vad2);TL3 = 10*log10(E2/E_vad3);
TL4 = 10*log10(E2/E_vad4);TL5 = 10*log10(E2/E_vad5);
TL6 = 10*log10(E2/E_vad6);TL7 = 10*log10(E2/E_vad7);
fprintf('经过第一声影区传播损失为 %.4fdB \n 第一会聚区传播损失为 %.4fdB',E_vad2,E_vad3);
fprintf('经过第二声影区传播损失为 %.4fdB \n 第二会聚区传播损失为 %.4fdB',E_vad4,E_vad5);
fprintf('经过第三声影区传播损失为 %.4fdB \n 第三会聚区传播损失为 %.4fdB',E_vad6,E_vad7);

%%采用频域自适应滤波检测


%% 匹配滤波
[r1,lags] = xcorr(s1 ,matchedFilter1);
idx = find(lags>=0,1);%找到第一个大于等于0的索引
r1 = r1(idx:end);
lags = lags(idx:end);

[r2,~] = xcorr(s2,matchedFilter1);
r2 = r2(idx:end);

[r3,~] = xcorr(s3 ,matchedFilter1);
r3 = r3(idx:end);

[r4,~] = xcorr(s4 ,matchedFilter1);
r4 = r4(idx:end);

[r5,~] = xcorr(s5 ,matchedFilter1);
r5 = r5(idx:end);

[r6,~] = xcorr(s6 ,matchedFilter1);
r6 = r6(idx:end);

[r7,~] = xcorr(s7 ,matchedFilter1);
r7 = r7(idx:end);

clear  temp;

figure
subplot(4,1,1)
plot(lags*(1/fs),real(r1));xlabel('t/s');ylabel('Am');grid on;title('direct area');
subplot(4,2,3)
plot(lags*(1/fs),real(r2));xlabel('t/s');ylabel('Am');grid on;title('1st shadow zone');
subplot(4,2,4)
plot(lags*(1/fs),real(r3));xlabel('t/s');ylabel('Am');grid on;title('1st convergence zone');

subplot(4,2,5)
plot(lags*(1/fs),real(r4));xlabel('t/s');ylabel('Am');grid on;title('2nd shadow zone');
subplot(4,2,6)
plot(lags*(1/fs),real(r5));xlabel('t/s');ylabel('Am');grid on;title('2nd convergence zone');

subplot(4,2,7) 
plot(lags*(1/fs),real(r6));xlabel('t/s');ylabel('Am');grid on;title('3rd shadow zone');
subplot(4,2,8)
plot(lags*(1/fs),real(r7));xlabel('t/s');ylabel('Am');grid on;title('3rd convergence zone');